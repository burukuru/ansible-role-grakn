#
# Grakn - A Distributed Semantic Database
# Copyright (C) 2016  Grakn Labs Limited
#
# Grakn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Grakn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Grakn. If not, see <http://www.gnu.org/licenses/gpl.txt>.
#

# Internal Factory Definition
factory.internal=ai.grakn.factory.TitanInternalFactory
factory.analytics=ai.grakn.factory.TitanHadoopInternalFactory

# Computer
graph.computer=ai.grakn.graph.internal.computer.GraknSparkComputer

#In-Memory or Distributed task manager
taskmanager.implementation={{grakn_engine_taskmanager_implementation}}

# Logging
log.dirs={{ grakn_engine_log_dirs }}
log.level={{ grakn_engine_log_level}}

#Spark Config
server.port=4567
server.host=0.0.0.0
server.static-file-dir=../assets/

#RESTLoader Config
loader.repeat-commits=5

#Redis Config
redis.host={{ redis_host }}
redis.port=6379

#Background tasks Config
backgroundTasks.time-lapse={{ grakn_backgroundTasks_time_lapse | default('300000') }}
tasks.postprocessing.delay={{ grakn_tasks_postprocessing_delay | default('60000') }}

####################################
# Grakn Graph Config               #
####################################
#Keyspace to be used when none is provided
graphdatabase.default-keyspace=grakn

#A Type will be sharded when this instance threshold is hit
graph.sharding-threshold={{ grakn_graph_sharding_threshold }}

# Graph ontology caching
graph.ontology-cache-timeout-ms={{ grakn_graph_ontology_cache_timeout_ms | default('grakn_graph_ontology_cache_timeout_ms') }}
graph.batch.ontology-cache-timeout-ms={{ grakn_graph_batch_ontology_cache_timeout_ms | default('30000') }}
storage.cassandra.frame-size-mb = 200

# Titan Caching
cache.db-cache = true

# Titan Cache Refresh Time in milliseconds
cache.db-cache-clean-wait = 20

# Titan Cache Expiry Time in milliseconds
cache.db-cache-time = 180000

# Titan Cache Size in proportion to JVM size 0 (small) to 1 (large)
cache.db-cache-size = 0.25

# Storage Backend
storage.backend=cassandra

# Host Location
storage.hostname={{ storage_hostname }}

{% if storage_cassandra_replication_strategy_class is defined %}
storage.cassandra.replication-strategy-class = {{ storage_cassandra_replication_strategy_class }}
{% endif %}
{% if storage_cassandra_replication_strategy_options is defined %}
storage.cassandra.replication-strategy-options = {{ storage_cassandra_replication_strategy_options }}
{% endif %}

####################################
# Kafka Config                   #
####################################
# There are some properties we override: enable.auto.commit, auto.offset.reset, metadata.max.age.ms, max.poll.interval.ms, max.poll.records
bootstrap.servers={% for seed in kafka_hosts %}{{seed}}:9092{% if not loop.last %},{% endif %}{% endfor %}

consumer.session-timeout=30000
producer.retries=0
producer.batch-size=16384
producer.linger-ms=1
producer.buffer-mem=33554432

####################################
# Zookeeper Config                   #
####################################

tasks.zookeeper.servers={% for seed in zookeeper_hosts %}{{seed}}:2181{% if not loop.last %},{% endif %}{% endfor %}

tasks.zookeeper.session_timeout_ms=60000
tasks.zookeeper.connection_timeout_ms=15000
tasks.zookeeper.backoff.base_sleep=1000
tasks.zookeeper.backoff.max_retries=3
tasks.scheduler.polling-frequency=1000
tasks.runner.polling-frequency=1000
tasks.zookeeper.namespace=grakn

#Loader Config
loader.threads=0

#Authentication
password.protected=false
JWT.secret=Anzdz9l4TG8N5y18oaTDueqJQca1aX7loaz0U8Hz
admin.password=grakn

####################################
# Gremlin Config                   #
####################################
gremlin.graph=org.apache.tinkerpop.gremlin.hadoop.structure.HadoopGraph
gremlin.hadoop.graphInputFormat=com.thinkaurelius.titan.hadoop.formats.cassandra.CassandraInputFormat
gremlin.hadoop.graphOutputFormat=org.apache.tinkerpop.gremlin.hadoop.structure.io.gryo.GryoOutputFormat
gremlin.hadoop.jarsInDistributedCache=true
gremlin.hadoop.inputLocation=none
#gremlin.hadoop.outputLocation=/test/output
gremlin.hadoop.outputLocation=output

####################################
# Cassandra Cluster Config         #
####################################
titanmr.ioformat.conf.storage.backend=cassandra
titanmr.ioformat.conf.storage.hostname={{ storage_hostname }}
titanmr.ioformat.cf-name=edgestore

####################################
# SparkGraphComputer Configuration #
####################################
spark.master={{ grakn_analytics_spark_master }}
spark.executor.memory={{ grakn_analytics_spark_executor_memory }}
spark.executor.cores={{ grakn_analytics_spark_executor_cores }}
spark.cores.max={{ grakn_analytics_spark_cores_max }}
spark.serializer=org.apache.spark.serializer.KryoSerializer
{% if grakn_analytics_spark_eventLog_enabled is defined %}
spark.eventLog.enabled={{ grakn_analytics_spark_eventLog_enabled }}
{% endif %}
{% if grakn_analytics_spark_evenLog_dir is defined %}
spark.eventLog.dir={{ grakn_analytics_spark_evenLog_dir }}
{% endif %}
spark.ui.showConsoleProgress=false

####################################
# Apache Cassandra InputFormat configuration
####################################
cassandra.input.partitioner.class=org.apache.cassandra.dht.Murmur3Partitioner
cassandra.input.predicate=0c00020b0001000000000b000200000000020003000800047fffffff0000
cassandra.input.columnfamily=edgestore
cassandra.range.batch.size=4096
cassandra.thrift.framed.size_mb=1024

####################################
# Hadoop Cluster configuration     #
####################################
{% if grakn_analytics_hdfs is defined %}
fs.defaultFS={{ grakn_analytics_hdfs }}
{% endif %}
